{"version":3,"sources":["routes/config.js","App.js","serviceWorker.js","index.js"],"names":["path","component","lazy","routes","redirect","App","config","routesConfig","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAGe,GACX,CACIA,KAAM,aACNC,UAAWC,aAAK,kBAAK,sEACrBC,OAAQ,CACJ,CACIH,KAAM,aACNI,SAAU,sBAEd,CACIJ,KAAM,qBACNC,UAAWC,aAAK,kBAAM,8EAE1B,CACIF,KAAM,qBACNC,UAAWC,aAAK,kBAAM,yDAE1B,CACIF,KAAM,yBACNC,UAAWC,aAAK,kBAAM,iEAE1B,CACIF,KAAM,yBACNC,UAAWC,aAAK,kBAAM,2DAIlC,CACIF,KAAM,IACNC,UAAWC,aAAK,kBAAK,+DACrBC,OAAQ,CACJ,CACIH,KAAM,IACNI,SAAU,YAEd,CACIJ,KAAM,WACNC,UAAWC,aAAK,kBAAM,8EAE1B,CACIF,KAAM,WACNC,UAAWC,aAAK,kBAAM,8EAE1B,CACIF,KAAM,WACNC,UAAWC,aAAK,kBAAM,8EAE1B,CACIF,KAAM,aACNC,UAAWC,aAAK,kBAAM,8EAE1B,CACIF,KAAM,WACNC,UAAWC,aAAK,kBAAM,8EAE1B,CACIF,KAAM,SACNC,UAAWC,aAAK,kBAAM,8EAE1B,CACIF,KAAM,WACNC,UAAWC,aAAK,kBAAM,8EAE1B,CACIF,KAAM,SACNC,UAAWC,aAAK,kBAAM,0EC9CvBG,G,gMATb,WACE,OACE,6BACG,kBAAC,IAAD,CAAaC,OAAQC,S,GAJZC,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9489454a.chunk.js","sourcesContent":["import { lazy } from \"react-router-guard\";\n\n\nexport default [\n    {\n        path: \"/dashboard\",\n        component: lazy(()=> import(\"../components/Layouts/dashboard\")),\n        routes: [\n            {\n                path: '/dashboard',\n                redirect: '/dashboard/product',\n            },\n            {\n                path: '/dashboard/product',\n                component: lazy(() => import(\"../components/Dashboard/Dashboard\"))\n            },\n            {\n                path: '/dashboard/trainer',\n                component: lazy(() => import(\"../components/Dashboard/Trainer\"))\n            },\n            {\n                path: '/dashboard/certificate',\n                component: lazy(() => import(\"../components/Dashboard/Certificate\"))\n            },\n            {\n                path: '/dashboard/message/:id',\n                component: lazy(() => import(\"../components/Dashboard/Message\"))\n            }\n        ]\n    },\n    {\n        path: \"/\",\n        component: lazy(()=> import(\"../components/Layouts/Landing\")),\n        routes: [\n            {\n                path: '/',\n                redirect: '/landing',\n            },\n            {\n                path: '/landing',\n                component: lazy(() => import(\"../components/Home/Home\"))\n            },\n            {\n                path: '/contact',\n                component: lazy(() => import(\"../components/ContantUs/ContantUs\"))\n            },\n            {\n                path: '/product',\n                component: lazy(() => import(\"../components/ProductShow/AllProduct\"))\n            },\n            {\n                path: '/order/:id',\n                component: lazy(() => import(\"../components/Order/Order\"))\n            },\n            {\n                path: '/trainer',\n                component: lazy(() => import(\"../components/Certificate/TrainerForm\"))\n            },\n            {\n                path: '/admin',\n                component: lazy(() => import(\"../components/Login/Login\"))\n            },\n            {\n                path: '/gallery',\n                component: lazy(() => import(\"../components/Gallery/Gallery\"))\n            },\n            {\n                path: '/about',\n                component: lazy(() => import(\"../components/About/About\"))\n            }\n        ]\n    }\n]","import React, { Component } from 'react';\nimport { RouterGuard } from 'react-router-guard';\nimport routesConfig from './routes/config';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap';\nimport './styles/ui.css';\nimport 'react-slideshow-image/dist/styles.css'\nimport 'antd/dist/antd.css';\n\n\nclass App extends Component{\n  render(){\n    return (\n      <div>\n         <RouterGuard config={routesConfig} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}